{"version":3,"sources":["components/Board.tsx","components/Game.tsx","index.tsx"],"names":["Square","props","winSquares","includes","index","className","onClick","value","Board","squares","renderSquare","i","key","board","j","push","calculateWinner","lines","length","a","b","c","winner","Game","status","useState","history","Array","fill","col","row","player","stepNumber","xIsNext","reversed","gameState","setGameState","jumpToHandler","step","getDescription","getStep","move","current","reversedMove","moves","map","desc","style","fontWeight","reverse","slice","Math","floor","concat","handleClick","reversedHistory","toggleHandler","marginLeft","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e81b34a9.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\n\r\ninterface SquareProps {\r\n  key: number;\r\n  index: number;\r\n  value: String;\r\n  onClick: any;\r\n  winSquares: number[]\r\n}\r\n\r\nfunction Square(props: SquareProps) {\r\n  return props.winSquares && props.winSquares.includes(props.index) ? (\r\n    <button className=\"win-square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  ) : (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\ninterface BoardProps {\r\n  squares: Array<String>;\r\n  onClick: any;\r\n  winSquares: number[];\r\n}\r\n\r\nconst Board: FC<BoardProps> = ({ squares, onClick, winSquares }) => {\r\n  const renderSquare = (i: number) => {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        index={i}\r\n        value={squares[i]}\r\n        onClick={() => onClick(i)}\r\n        winSquares={winSquares}\r\n      />\r\n    );\r\n  }\r\n\r\n  let board = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let squares = [];\r\n    for (var j = 0; j < 3; j++) {\r\n      squares.push(renderSquare(j + i * 3));\r\n    }\r\n    // An interesting side-effect is that every element within an array needs to have a \"key\" value\r\n    board.push(\r\n      <div className=\"board-row\" key={i}>\r\n        {squares}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>{board}</div>;\r\n}\r\n\r\nexport default Board;\r\n","import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\n\r\nfunction calculateWinner(squares: Array<String>) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return { winner: squares[a], winSquares: [a, b, c] };\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction Game() {\r\n  const [gameState, setGameState] = useState({\r\n    history: [\r\n      {\r\n        squares: Array(9).fill(null),\r\n        col: -1,\r\n        row: -1,\r\n        player: null\r\n      },\r\n    ],\r\n    stepNumber: 0,\r\n    xIsNext: true,\r\n    reversed: false,\r\n  });\r\n\r\n  const handleClick = (i: number) => {\r\n    // If user goes back and adds a new move while on a previous move, erase all future moves\r\n    const history = !gameState.reversed\r\n      ? gameState.history.slice(0, gameState.stepNumber + 1)\r\n      : gameState.history\r\n          .reverse()\r\n          .slice(0, gameState.stepNumber + 1)\r\n          .reverse();\r\n\r\n    const current = !gameState.reversed\r\n      ? history[history.length - 1]\r\n      : history[0];\r\n\r\n    const squares = current.squares.slice();\r\n    // Optimize by not re-rendering if someone already won or if user clicked on a Square that is already filled\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    // Update the board depending on if the current user is X or O\r\n    squares[i] = gameState.xIsNext ? \"X\" : \"O\";\r\n\r\n    setGameState({\r\n      ...gameState,\r\n      // Add on to history\r\n      history: !gameState.reversed\r\n        ? history.concat([\r\n            {\r\n              squares: squares,\r\n              col: i % 3,\r\n              row: Math.floor(i / 3),\r\n              player: squares[i],\r\n            },\r\n          ])\r\n        : [\r\n            {\r\n              squares: squares,\r\n              col: i % 3,\r\n              row: Math.floor(i / 3),\r\n              player: squares[i],\r\n            },\r\n          ].concat(history),\r\n      stepNumber: history.length,\r\n      xIsNext: !gameState.xIsNext,\r\n    });\r\n  };\r\n\r\n  const jumpToHandler = (step: any) => {\r\n    setGameState({\r\n      ...gameState,\r\n      stepNumber: !gameState.reversed\r\n        ? step\r\n        : gameState.history.length - 1 - step,\r\n      xIsNext: !gameState.reversed\r\n        ? step % 2 === 0\r\n        : (gameState.history.length - 1 - step) % 2 === 0,\r\n    });\r\n  };\r\n\r\n  // Reverses the history array\r\n  const toggleHandler = () => {\r\n    const reversedHistory = gameState.history\r\n      .slice(0, gameState.history.length)\r\n      .reverse();\r\n    setGameState({\r\n      ...gameState,\r\n      history: reversedHistory,\r\n      reversed: !gameState.reversed,\r\n    });\r\n  };\r\n\r\n  const getDescription = (getStep: any, step: any, move: any) => {\r\n    return getStep\r\n      ? \"Go to move #\" +\r\n          move +\r\n          \" where \" +\r\n          step.player +\r\n          \" moved to (\" +\r\n          step.col +\r\n          \", \" +\r\n          step.row +\r\n          \")\"\r\n      : \"Go to game start\";\r\n  };\r\n\r\n  const history = gameState.history;\r\n  // Get the current based on where in history the user is\r\n  const current = !gameState.reversed\r\n    ? history[gameState.stepNumber]\r\n    : history[gameState.history.length - 1 - gameState.stepNumber];\r\n  const winner = calculateWinner(current.squares);\r\n\r\n  // If the history array is reversed, count down instead of up\r\n  let reversedMove = gameState.history.length;\r\n  const moves = history.map((step, move) => {\r\n    reversedMove--;\r\n    const desc = !gameState.reversed\r\n      ? getDescription(move, step, move)\r\n      : getDescription(\r\n          move !== gameState.history.length - 1,\r\n          step,\r\n          reversedMove\r\n        );\r\n\r\n    return (\r\n      <li key={move}>\r\n        {(!gameState.reversed && move === gameState.stepNumber) ||\r\n        (gameState.reversed && reversedMove === gameState.stepNumber) ? (\r\n          <button\r\n            style={{ fontWeight: \"bold\" }}\r\n            onClick={() => jumpToHandler(move)}\r\n          >\r\n            {desc}\r\n          </button>\r\n        ) : (\r\n          <button onClick={() => jumpToHandler(move)}>{desc}</button>\r\n        )}\r\n      </li>\r\n    );\r\n  });\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner.winner;\r\n  } else {\r\n    status =\r\n      gameState.history.length === 10\r\n        ? \"Draw!\"\r\n        : \"Next player: \" + (gameState.xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={(i: number) => handleClick(i)}\r\n          winSquares={winner ? winner.winSquares : []}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>\r\n          {status}\r\n          <button onClick={() => toggleHandler()} style={{ marginLeft: \"8px\" }}>\r\n            Toggle\r\n          </button>\r\n        </div>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport Game from \"./components/Game\";\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}